import M from'jsonwebtoken';import h from'bcrypt';import l from'crypto';var k=Object.defineProperty;var a=(e,t)=>{for(var o in t)k(e,o,{get:t[o],enumerable:true});};var u={};a(u,{authentication:()=>c,errorHandler:()=>d,responseHandler:()=>g,routeLog:()=>w,validateSchema:()=>p});var w=(e,t,o)=>{let r=new Date().toISOString(),n=e.ip??e.socket.remoteAddress??"unknown";console.log(`\x1B[0;36m[${r}] \x1B[0;35m[${n}] \x1B[0;33m${e.method} \x1B[0m${e.path}`),o();};var g=(e,t,o)=>{t.ok=r=>{t.json({data:r});},o();};var d={};a(d,{api:()=>b,www:()=>E});var b=(e,t,o,r)=>{o.statusCode===200&&o.status(500),JSON.stringify(e)==="{}"&&e instanceof Error?o.json({error:e.message}):o.json({error:e});};var E=e=>(t,o,r,n)=>{let s;e&&typeof e=="object"&&(s=e[r.statusCode]),s??="back";let i=t instanceof Error?t.message:"Unknown error";r.send(`
      <script>
        alert("${i}");

        if ("${s}" === "back") {
          history.back();
        } else {
          window.location.replace("${s}");
        }
      </script>
    `);};var c={};a(c,{jwt:()=>H,local:()=>j});var j=(e,t,o)=>{let r=e.ip??e.socket.remoteAddress;if(r!=="::1"&&r!=="localhost")throw t.status(401),new Error("Unauthorized");o();};var H=(e,t)=>(o,r,n)=>{let s=o.headers.authorization?.split(" ")[1];if(!s&&t&&(s=o.signedCookies?.[t]??o.cookies?.[t]),!s)throw r.status(401),new Error("No authorization header or cookie");try{let i=M.verify(s,e);o.jwt={token:s,decoded:i};}catch(i){throw r.status(401),i}n();};var p={};a(p,{zod:()=>R});var R=e=>(t,o,r)=>{try{t.body=e.parse(t.body);}catch(n){throw o.status(422),n}r();};var y={};a(y,{password:()=>x});var x={};a(x,{bcrypt:()=>m,hmac:()=>f});var m={};a(m,{hash:()=>$,verify:()=>A});var $=async e=>h.hash(e,10),A=async(e,t)=>h.compare(e,t);var f={};a(f,{hash:()=>S,verify:()=>T});var S=(e,t="sha256",o="base64")=>{let r=l.randomBytes(16),n=l.createHmac(t,r).update(e);return `${r.toString(o)}.${n.digest(o)}`},T=(e,t,o="sha256",r="base64")=>{let[n,s]=t.split("."),i=l.createHmac(o,Buffer.from(n,r)).update(e);return s===i.digest(r)};export{u as middleware,y as utils};